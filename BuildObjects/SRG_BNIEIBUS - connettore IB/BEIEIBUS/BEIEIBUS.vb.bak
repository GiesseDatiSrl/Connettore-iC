Imports System.Data
Imports NTSInformatica.CLN__STD
Imports System.Text
Imports System.IO

Public Class CLEIEIBUS
  Inherits CLE__BASN

  Private Moduli_P As Integer = bsModAll
  Private ModuliExt_P As Integer = 0
  Private ModuliSup_P As Integer = 0
  Private ModuliSupExt_P As Integer = 0
  Private ModuliPtn_P As Integer = 0
  Private ModuliPtnExt_P As Integer = 0

  Public ReadOnly Property Moduli() As Integer
    Get
      Return Moduli_P
    End Get
  End Property
  Public ReadOnly Property ModuliExt() As Integer
    Get
      Return ModuliExt_P
    End Get
  End Property
  Public ReadOnly Property ModuliSup() As Integer
    Get
      Return ModuliSup_P
    End Get
  End Property
  Public ReadOnly Property ModuliSupExt() As Integer
    Get
      Return ModuliSupExt_P
    End Get
  End Property
  Public ReadOnly Property ModuliPtn() As Integer
    Get
      Return ModuliPtn_P
    End Get
  End Property
  Public ReadOnly Property ModuliPtnExt() As Integer
    Get
      Return ModuliPtnExt_P
    End Get
  End Property

  Public oCldIbus As CLDIEIBUS

  Public strDropBoxDir As String = ""
  Public strFiltroGGStoArt As String = ""

  Public strTipork As String = ""         'elenco operazioni da compiere in import/export
  Public strContiEsclusi As String = "0"  'conto NS stabilimento

  Public Overrides Function Init(ByRef App As CLE__APP, _
                              ByRef oScriptEngine As INT__SCRIPT, ByRef oCleLbmenu As Object, ByVal strTabella As String, _
                              ByVal bRemoting As Boolean, ByVal strRemoteServer As String, _
                              ByVal strRemotePort As String) As Boolean
    If MyBase.strNomeDal = "BD__BASE" Then MyBase.strNomeDal = "BDIEIBUS"
    MyBase.Init(App, oScriptEngine, oCleLbmenu, strTabella, bRemoting, strRemoteServer, strRemotePort)
    oCldIbus = CType(MyBase.ocldBase, CLDIEIBUS)
    oCldIbus.Init(oApp)

    Return True
  End Function

  Public Overridable Function ConvStr(ByVal oIn As Object) As String
    ConvStr = NTSCStr(oIn)
    Try
      Return NTSCStr(oIn).Replace(vbCrLf, " ").Replace("|", "_").Trim

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function ConvData(ByVal oIn As Object, ByVal bUltAgg As Boolean) As String
    ConvData = ""
    Try
      If NTSCStr(oIn) <> "" Then
        If bUltAgg Then
          Return NTSCDate(oIn).ToString("ddMMyyyyHHmmss")
        Else
          Return NTSCDate(oIn).ToString("ddMMyyyy")
        End If
      Else
        Return ""
      End If

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function

  Public Overridable Function Elabora() As Boolean
    Dim strMsg As String = ""
    Dim arFileGen As New ArrayList  'elenco di file generatichee andranno copiati dalla dir TMP alla dir di dropbox
    Dim i As Integer = 0
    Dim dttTm As New DataTable      'testate documenti di magazzino/ordini
    Dim dttCat As New DataTable     'articoli con immagine catalogo
    Dim strFileCat As String = ""
    Try
      strDropBoxDir = oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "DropBoxDir", "", " ", "")
      strContiEsclusi = oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "ContiEsclusi", "0", " ", "0").Trim
      strFiltroGGStoArt = oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "FiltroGGStoArt", "180", " ", "180").Trim

      '--------------------
      'avvio il file di log della procedura di import/export
      If oApp.Batch Then
        If Not LogStart("BNIEIBUS_BATCH", "Import/export Vs IBUS" & vbCrLf, True) Then Return False
        LogWrite(oApp.Tr(Me, 128768492996465000, "Per dettagli sull'avvio in modalità BATCH consultare il file '|BusNetBatch_" & System.Diagnostics.Process.GetCurrentProcess.Id.ToString & ".log|'"), False)
      Else
        If Not LogStart("BNIEIBUS", "Import/export Vs IBUS" & vbCrLf) Then Return False
      End If
      strMsg = oApp.Tr(Me, 129877602933085931, "Elaborazione avviata con i seguenti parametri:" & vbCrLf & _
                       "DropBox Dir: '|" & strDropBoxDir & "|'" & vbCrLf & _
                       "Operazioni da compiere: '|" & strTipork & "|'")
      LogWrite(strMsg, False)

      '--------------------
      'controlli pre-elaborazione
      If strDropBoxDir.Trim = "" Then
        LogWrite(oApp.Tr(Me, 129877622189278434, "Directory DropBox non settata per la ditta |'" & strDittaCorrente & "'|. Impostarla con l'opzione di registro |'Bsieibus/Opzioni/DropBoxDir'|. Elaborazione interrotta."), True)
        Return False
      End If
      If System.IO.Directory.Exists(strDropBoxDir) = False Then
        LogWrite(oApp.Tr(Me, 129877623144826060, "Directory DropBox |'" & strDropBoxDir & "'| Inesistente. Elaborazione interrotta."), True)
        Return False
      End If

      If strTipork.EndsWith(";") = False Then strTipork += ";"
      strTipork = strTipork.ToUpper

      '--------------------
      'Export causali
      If strTipork.Contains("PAG;") Then
        If Not Elabora_ExportCausali(oApp.AscDir & "\IB_CONDPAG.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CONDPAG.DAT")
      End If

      '--------------------
      'Export comuni
      If strTipork.Contains("CIT;") Then
        If Not Elabora_ExportCitta(oApp.AscDir & "\IB_CITTA.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CITTA.DAT")
      End If

      '--------------------
      'Export clienti/fornitori e tabelle relative
      If strTipork.Contains("CLI;") Then
        If Not Elabora_ExportClifor(oApp.AscDir & "\IB_CLIFOR.DAT", _
                                    oApp.AscDir & "\IB_CLIFOR_BLO.DAT", _
                                    oApp.AscDir & "\IB_CLIFOR_INFO.DAT", _
                                    oApp.AscDir & "\IB_CLIFOR_NOTE.DAT", _
                                    oApp.AscDir & "\IB_CLIFOR_VEN.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_BLO.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_INFO.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_NOTE.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_VEN.DAT")

        If Not Elabora_ExportCliforDestdiv(oApp.AscDir & "\IB_CLIFOR_DEST.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_DEST.DAT")

        If Not Elabora_ExportCliforAge(oApp.AscDir & "\IB_CLIFOR_AGE.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_AGE.DAT")

        If Not Elabora_ExportCliforOrganig(oApp.AscDir & "\IB_CLIFOR_DETCON.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_DETCON.DAT")

        If Not Elabora_ExportCliforFatt(oApp.AscDir & "\IB_CLIFOR_FATT.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_FATT.DAT")

        If Not Elabora_ExportCliforTestDoc(oApp.AscDir & "\IB_CLIFOR_TESTDOC.DAT", dttTm) Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_TESTDOC.DAT")

        If Not Elabora_ExportCliforRighDoc(oApp.AscDir & "\IB_CLIFOR_RIGHDOC.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_RIGHDOC.DAT")

        If Not Elabora_ExportCliforScadoc(oApp.AscDir & "\IB_CLIFOR_SCADOC.DAT", dttTm) Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CLIFOR_SCADOC.DAT")
      End If


      '--------------------
      'Export articoli e tabelle relative
      If strTipork.Contains("ART;") Then
        If Not Elabora_ExportArt(oApp.AscDir & "\IB_ART.DAT", _
                                 oApp.AscDir & "\IB_ART_CONF.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_ART.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_ART_CONF.DAT")
      End If

      '--------------------
      'Export giacenze articoli
      If strTipork.Contains("MAG;") Then
        If Not Elabora_ExportArtGiacenze(oApp.AscDir & "\IB_GIACENZE.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_GIACENZE.DAT")

        If Not Elabora_ExportArtUltven(oApp.AscDir & "\IB_ART_ULTVEN.DAT", _
                               oApp.AscDir & "\IB_ART_ULTACQ.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_ART_ULTVEN.DAT")
        arFileGen.Add(oApp.AscDir & "\IB_ART_ULTACQ.DAT")

        If Not Elabora_ExportArtStoart(oApp.AscDir & "\IB_STOART.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_STOART.DAT")
      End If

      '--------------------
      'Export listini articoli
      If strTipork.Contains("LIS;") Then
        If Not Elabora_ExportListini(oApp.AscDir & "\IB_LISTINI.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_LISTINI.DAT")
      End If

      '--------------------
      'Export sconti articoli
      If strTipork.Contains("SCO;") Then
        If Not Elabora_ExportSconti(oApp.AscDir & "\IB_SCONTI.DAT") Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_SCONTI.DAT")
      End If

      '--------------------
      'Export catalogo articoli
      If strTipork.Contains("CAT;") Then
        If Not Elabora_ExportCatalogo(oApp.AscDir & "\IB_CATALOGO.DAT", dttCat) Then Return False
        arFileGen.Add(oApp.AscDir & "\IB_CATALOGO.DAT")
      End If


      '--------------------
      'copio i files nella dir di dropbox
      For i = 0 To arFileGen.Count - 1
        If arFileGen(i).ToString.ToLower.EndsWith("ib_catalogo.dat") Then
          File.Delete(strDropBoxDir & "\multimedia\" & arFileGen(i).ToString.Substring(oApp.AscDir.Length))
          If File.Exists(arFileGen(i).ToString) Then
            System.IO.File.Copy(arFileGen(i).ToString, strDropBoxDir & "\multimedia\" & arFileGen(i).ToString.Substring(oApp.AscDir.Length), True)
          End If
        Else
          File.Delete(strDropBoxDir & "\gestionale\" & arFileGen(i).ToString.Substring(oApp.AscDir.Length))
          If File.Exists(arFileGen(i).ToString) Then
            System.IO.File.Copy(arFileGen(i).ToString, strDropBoxDir & "\gestionale\" & arFileGen(i).ToString.Substring(oApp.AscDir.Length), True)
          End If
        End If
      Next

      '--------------------
      'se devo esportare anche il catalogo, copio le immagini
      If dttCat.Rows.Count > 0 Then
        If Not Directory.Exists(strDropBoxDir & "\multimedia") Then
          Directory.CreateDirectory(strDropBoxDir & "\multimedia")
        End If
        For Each dtrT As DataRow In dttCat.Rows
          'tolgo l'eventale attributo di sola lettura
          strFileCat = strDropBoxDir & "\multimedia\" & NTSCStr(dtrT!ar_codart) & Path.GetExtension(oApp.ImgDir & "\" & NTSCStr(dtrT!ar_gif1))
          If File.Exists(strFileCat) Then
            File.SetAttributes(strFileCat, FileAttributes.Normal)
          End If
          System.IO.File.Copy(oApp.ImgDir & "\" & NTSCStr(dtrT!ar_gif1), strFileCat, True)
        Next
      End If



      '--------------------
      'Import Ordini
      If strTipork.Contains("ORD;") Then
        If Not Elabora_ImportOrdini() Then Return False
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------
    Finally
      dttTm.Clear()
      dttCat.Clear()
      LogStop()
    End Try
  End Function

  Public Overridable Function Elabora_ExportCausali(ByVal strFileOut As String) As Boolean
    'esporta tutti i codici pagamento
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCodpaga(dttTmp) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|CODICE|DESCRIZIONE|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!tb_codpaga) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!tb_codpaga) & "|" & _
                      ConvStr(dtrT!tb_despaga) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCitta(ByVal strFileOut As String) As Boolean
    'esporta tutti i comuni
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetComuni(dttTmp) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|CODICE|DESCRIZIONE|CAP|PROVINCIA|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!co_codcomu) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!co_codcomu) & "|" & _
                      ConvStr(dtrT!co_denom) & "|" & _
                      ConvStr(dtrT!co_cap) & "|" & _
                      ConvStr(dtrT!co_prov) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function Elabora_ExportClifor16(ByVal strFileOut As String, ByVal strFileOutBlo As String, _
                                                   ByVal strFileOutInfo As String, ByVal strFileOutNote As String, _
                                                   ByVal strFileOutVend As String) As Boolean
    'esporta tutti i clienti/fornitori ATTIVI o POTENZIALI con relativi dati associati
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim sbFileBlo As New StringBuilder
    Dim sbFileInfo As New StringBuilder
    Dim sbFileNote As New StringBuilder
    Dim sbFileVend As New StringBuilder
    Dim strBlocco As String = ""
    Try
      If Not oCldIbus.GetClifor(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|RAG_SOC|INDIRIZZO|PARTITA_IVA|" & _
                    "CODICE_FISCALE|TELEFONO1|TELEFONO2|FAX|CELLULARE|E-MAIL|INTERNET|CAP|" & _
                    "CITTA|PROV|LATITUDINE|LONGITUDINE|DAT_ULT_MOD" & vbCrLf)

      sbFileBlo.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|COD_BLOCCO|TIPO_BLOCCO|NOTA_BLOCCO|" & _
                    "DATA_BLOCCO|DAT_ULT_MOD" & vbCrLf)

      sbFileNote.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|PROGRESSIVO|TIPO_NOTA|NOTA|DAT_ULT_MOD" & vbCrLf)

      sbFileVend.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|PAGAMENTO|BANCA|AGENZIA|" & _
                    "LISTINO_ANAGRAFICO|LISTINO_ARTICOLI|VALUTA|SCONTI_ANAG_PERC|SCONTI_ANAG_IMP|" & _
                    "MAGGIORAZIONE_ANAG_PERC|SCONTO_PIEDE|COD_LISTINO|COD_CONDPAG|DAT_ULT_MOD" & vbCrLf)

      sbFileInfo.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|MACROAREA|DATA_CREAZIONE|AREA|" & _
                    "ZONA|MACROCATEGORIA|DATA_ULT_DOC_NO_FT|CATEGORIA|DATA_ULT_DOC_FT|DATA_ULT_ORDINE|" & _
                    "FIDO_AZIENDALE|RAGGR1|RAGGR2|RAGGR3|DAT_ULT_MOD" & vbCrLf)

      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      (ConvStr(dtrT!an_descr1) & " " & ConvStr(dtrT!an_descr2)).Trim & "|" & _
                      ConvStr(dtrT!an_indir) & "|" & _
                      ConvStr(dtrT!an_pariva) & "|" & _
                      ConvStr(dtrT!an_codfis) & "|" & _
                      ConvStr(dtrT!an_telef) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!an_faxtlx) & "|" & _
                      ConvStr(dtrT!an_cell) & "|" & _
                      ConvStr(dtrT!an_email) & "|" & _
                      ConvStr(dtrT!an_website) & "|" & _
                      ConvStr(dtrT!an_cap) & "|" & _
                      ConvStr(dtrT!an_citta) & "|" & _
                      ConvStr(dtrT!an_prov) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvData(dtrT!an_ultagg, True) & vbCrLf)

        'FILE note
        sbFileNote.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      "1" & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!an_note2) & "|" & _
                      "01011900000000" & vbCrLf)

        'FILE vend
        sbFileVend.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvStr(dtrT!tb_despaga) & "|" & _
                      ConvStr(dtrT!an_banc1) & "|" & _
                      ConvStr(dtrT!an_banc2) & "|" & _
                      (ConvStr(dtrT!an_listino) & " - " & ConvStr(dtrT!tb_deslist)).Trim & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!tb_desvalu) & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      NTSCDec(dtrT!tb_scopaga).ToString(oApp.FormatSconti) & "|" & _
                      ConvStr(dtrT!an_listino) & "|" & _
                      ConvStr(dtrT!an_codpag) & "|" & _
                      "01011900000000" & vbCrLf)

        'FILE info
        sbFileInfo.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvStr(dtrT!tb_descana) & "|" & _
                      ConvData(dtrT!an_dtaper, False) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!tb_deszone) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!tb_descate) & "|" & _
                      ConvData(dtrT!xx_ultfatt, False) & "|" & _
                      ConvData(dtrT!xx_ultord, False) & "|" & _
                      NTSCDec(dtrT!an_fido).ToString(oApp.FormatSconti) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "01011900000000" & vbCrLf)

        'FILE blocco
        If NTSCStr(dtrT!an_blocco) <> "N" Then
          Select Case NTSCStr(dtrT!an_blocco)
            Case "F" : strBlocco = "Fuori fido"
            Case "I" : strBlocco = "Insoluti"
            Case "R" : strBlocco = "Rim. dirette scadute"
            Case "B" : strBlocco = "Blocco fisso"
          End Select
          sbFileBlo.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                          strDittaCorrente & "|" & _
                          IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                          ConvStr(dtrT!an_conto) & "|" & _
                          "0" & "|" & _
                          "" & "|" & _
                          strBlocco & "|" & _
                          "" & "|" & _
                          "01011900000000" & vbCrLf)
        End If

      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutBlo, False)
      w1.Write(sbFileBlo.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutNote, False)
      w1.Write(sbFileNote.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutVend, False)
      w1.Write(sbFileVend.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutInfo, False)
      w1.Write(sbFileInfo.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportClifor18(ByVal strFileOut As String, ByVal strFileOutBlo As String, _
                                                   ByVal strFileOutInfo As String, ByVal strFileOutNote As String, _
                                                   ByVal strFileOutVend As String) As Boolean
    'esporta tutti i clienti/fornitori ATTIVI o POTENZIALI con relativi dati associati
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim sbFileBlo As New StringBuilder
    Dim sbFileInfo As New StringBuilder
    Dim sbFileNote As New StringBuilder
    Dim sbFileVend As New StringBuilder
    Dim strBlocco As String = ""
    Try
      If Not oCldIbus.GetClifor(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

            sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|RAG_SOC|INDIRIZZO|PARTITA_IVA|" & _
                        "CODICE_FISCALE|TELEFONO1|TELEFONO2|FAX|CELLULARE|E-MAIL|INTERNET|CAP|" & _
                        "CITTA|PROV|LATITUDINE|LONGITUDINE|COD_CLASSE_SCONTO|DAT_ULT_MOD" & vbCrLf)

            sbFileBlo.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|COD_BLOCCO|TIPO_BLOCCO|NOTA_BLOCCO|" & _
                        "DATA_BLOCCO|DAT_ULT_MOD" & vbCrLf)

            sbFileNote.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|PROGRESSIVO|TIPO_NOTA|NOTA|DAT_ULT_MOD" & vbCrLf)

            sbFileVend.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|PAGAMENTO|BANCA|AGENZIA|" & _
                    "LISTINO_ANAGRAFICO|LISTINO_ARTICOLI|VALUTA|SCONTI_ANAG_PERC|SCONTI_ANAG_IMP|" & _
                    "MAGGIORAZIONE_ANAG_PERC|SCONTO_PIEDE|COD_LISTINO|COD_CONDPAG|DAT_ULT_MOD" & vbCrLf)

            sbFileInfo.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|MACROAREA|DATA_CREAZIONE|AREA|" & _
                    "ZONA|MACROCATEGORIA|DATA_ULT_DOC_NO_FT|CATEGORIA|DATA_ULT_DOC_FT|DATA_ULT_ORDINE|" & _
                    "FIDO_AZIENDALE|RAGGR1|RAGGR2|RAGGR3|COD_MACROAREA|COD_AREA|COD_ZONA|COD_MACROCATEGORIA|COD_CATEGORIA|COD_SOTTOCATEGORIA|DAT_ULT_MOD" & vbCrLf)

            For Each dtrT As DataRow In dttTmp.Rows
                sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                            strDittaCorrente & "|" & _
                            IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                            ConvStr(dtrT!an_conto) & "|" & _
                            (ConvStr(dtrT!an_descr1) & " " & ConvStr(dtrT!an_descr2)).Trim & "|" & _
                            ConvStr(dtrT!an_indir) & "|" & _
                            ConvStr(dtrT!an_pariva) & "|" & _
                            ConvStr(dtrT!an_codfis) & "|" & _
                            ConvStr(dtrT!an_telef) & "|" & _
                            "" & "|" & _
                            ConvStr(dtrT!an_faxtlx) & "|" & _
                            ConvStr(dtrT!an_cell) & "|" & _
                            ConvStr(dtrT!an_email) & "|" & _
                            ConvStr(dtrT!an_website) & "|" & _
                            ConvStr(dtrT!an_cap) & "|" & _
                            ConvStr(dtrT!an_citta) & "|" & _
                            ConvStr(dtrT!an_prov) & "|" & _
                            "" & "|" & _
                            "" & "|" & _
                            dtrT!an_clascon.ToString & "|" & _
                            ConvData(dtrT!an_ultagg, True) & vbCrLf)

                'FILE note
                sbFileNote.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                              strDittaCorrente & "|" & _
                              IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                              ConvStr(dtrT!an_conto) & "|" & _
                              "1" & "|" & _
                              "" & "|" & _
                              ConvStr(dtrT!an_note2) & "|" & _
                              "01011900000000" & vbCrLf)

                'FILE vend
                sbFileVend.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                              strDittaCorrente & "|" & _
                              IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                              ConvStr(dtrT!an_conto) & "|" & _
                              ConvStr(dtrT!tb_despaga) & "|" & _
                              ConvStr(dtrT!an_banc1) & "|" & _
                              ConvStr(dtrT!an_banc2) & "|" & _
                              (ConvStr(dtrT!an_listino) & " - " & ConvStr(dtrT!tb_deslist)).Trim & "|" & _
                              "" & "|" & _
                              ConvStr(dtrT!tb_desvalu) & "|" & _
                              "0" & "|" & _
                              "0" & "|" & _
                              "0" & "|" & _
                              NTSCDec(dtrT!tb_scopaga).ToString(oApp.FormatSconti) & "|" & _
                              ConvStr(dtrT!an_listino) & "|" & _
                              ConvStr(dtrT!an_codpag) & "|" & _
                              "01011900000000" & vbCrLf)

                'FILE info
                sbFileInfo.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                    strDittaCorrente & "|" & _
                    IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                    ConvStr(dtrT!an_conto) & "|" & _
                    ConvStr(dtrT!tb_descana) & "|" & _
                    ConvData(dtrT!an_dtaper, False) & "|" & _
                    "" & "|" & _
                    ConvStr(dtrT!tb_deszone) & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    ConvStr(dtrT!tb_descate) & "|" & _
                    ConvData(dtrT!xx_ultfatt, False) & "|" & _
                    ConvData(dtrT!xx_ultord, False) & "|" & _
                    NTSCDec(dtrT!an_fido).ToString(oApp.FormatSconti) & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "" & "|" & _
                    "01011900000000" & vbCrLf)

                'FILE blocco
                If NTSCStr(dtrT!an_blocco) <> "N" Then
                    Select Case NTSCStr(dtrT!an_blocco)
                        Case "F" : strBlocco = "Fuori fido"
                        Case "I" : strBlocco = "Insoluti"
                        Case "R" : strBlocco = "Rim. dirette scadute"
                        Case "B" : strBlocco = "Blocco fisso"
                    End Select
                    sbFileBlo.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "|" & _
                                    strDittaCorrente & "|" & _
                                    IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                                    ConvStr(dtrT!an_conto) & "|" & _
                                    "0" & "|" & _
                                    "" & "|" & _
                                    strBlocco & "|" & _
                                    "" & "|" & _
                                    "01011900000000" & vbCrLf)
                End If

            Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutBlo, False)
      w1.Write(sbFileBlo.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutNote, False)
      w1.Write(sbFileNote.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutVend, False)
      w1.Write(sbFileVend.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutInfo, False)
      w1.Write(sbFileInfo.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforDestdiv(ByVal strFileOut As String) As Boolean
    'esporta tutte le destinazioni diverse di clienti/fornitori ATTIVI o POTENZIALI 
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforDestdiv(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|PREFERENZIALE|COD_DEST|RAG_SOC_DEST|" & _
                    "INDIRIZZO|CAP|CITTA|PROVINCIA|STAMPA_PREF_DOC|TELEFONO|CELLULARE|" & _
                    "MAIL|FAX|NOTE_DEST|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!dd_conto) & "§" & ConvStr(dtrT!dd_coddest) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!dd_conto) & "|" & _
                      "0" & "|" & _
                      ConvStr(dtrT!dd_coddest) & "|" & _
                      ConvStr(dtrT!dd_nomdest) & "|" & _
                      ConvStr(dtrT!dd_inddest) & "|" & _
                      ConvStr(dtrT!dd_capdest) & "|" & _
                      ConvStr(dtrT!dd_locdest) & "|" & _
                      ConvStr(dtrT!dd_prodest) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!dd_telef) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!dd_email) & "|" & _
                      ConvStr(dtrT!dd_faxtlx) & "|" & _
                      ConvStr(dtrT!dd_note) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforAge(ByVal strFileOut As String) As Boolean
    'esporta gli agenti di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforAge(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|COD_AGE|RAGSOC_AGE|PREFERENZIALE|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!xx_agente) & "§" & ConvStr(dtrT!xx_prefer) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvStr(dtrT!xx_agente) & "|" & _
                      ConvStr(dtrT!tb_descage) & "|" & _
                      ConvStr(dtrT!xx_prefer) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforOrganig(ByVal strFileOut As String) As Boolean
    'esporta l'organizzazione di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforOrganig(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|ID_CONTATTO|TIPO_CONTATTO|PREF|" & _
                    "COGNOME_NOME|INDIRIZZO|CAP|CITTA|PR|ORARIO_LAVORO|TELEFONO1|TELEFONO2|" & _
                    "CELLULARE1|CELLULARE2|TELEF_CASA|FAX|EMAIL1|EMAIL2|ALTRO_INDIRIZZO1|" & _
                    "ALTRO_INDIRIZZO2|NOTE|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!og_progr) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvStr(dtrT!og_progr) & "|" & _
                      ConvStr(dtrT!og_rep) & "|" & _
                      "1" & "|" & _
                      (ConvStr(dtrT!og_descont) & " " & ConvStr(dtrT!og_descont2)).Trim & "|" & _
                      ConvStr(dtrT!og_indir) & "|" & _
                      ConvStr(dtrT!og_cap) & "|" & _
                      ConvStr(dtrT!og_citta) & "|" & _
                      ConvStr(dtrT!og_prov) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!og_telef) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!og_cell) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!og_fax) & "|" & _
                      ConvStr(dtrT!og_email) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforFatt(ByVal strFileOut As String) As Boolean
    'restituisco il fatturato degli ultimi 3 anno diviso per mese di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforFatt(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|ANNO|MESE|FATTURATO|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!xx_anno) & "§" & ConvStr(dtrT!xx_mese) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvStr(dtrT!xx_anno) & "|" & _
                      ConvStr(dtrT!xx_mese) & "|" & _
                      NTSCDec(dtrT!xx_fatturato).ToString(oApp.FormatSconti) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforTestDoc(ByVal strFileOut As String, ByRef dttTm As DataTable) As Boolean
    'restituisco le testate dei documenti di magazino/ordini di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim sbFile As New StringBuilder
    Dim strTipoDoc As String = ""
    Try
      If Not oCldIbus.GetCliforTestDoc(strDittaCorrente, dttTm, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|TIPO_CLIFOR|COD_CLIFOR|COD_TIPODOC|COD_STIPODOC|" & _
                    "FLGDAEVADERE|DATDOC|NUMREG|TIPODOC|TIPO|SOTTOTIPO|DATAREG|SEZIONALE|NUMDOC|DOCORIG|" & _
                    "DEPOSITO|VALUTA|TOTALEDOC|DATACONS|SCADENZE|ESTCONT|TIPOSTATO_DOC|DATA_FATT|NUM_FATT|" & _
                    "NOTE_DOC|DATA_CONFERMA|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTm.Rows
        Select Case NTSCStr(dtrT!tm_tipork)
          Case "A" : strTipoDoc = "Fatt. Imm. em."
          Case "B" : strTipoDoc = "DDT emesso"
          Case "C" : strTipoDoc = "Corr. emesso"
          Case "D" : strTipoDoc = "Fatt. Diff. em."
          Case "E" : strTipoDoc = "Note di Add. em."
          Case "F" : strTipoDoc = "Ric.Fisc. em."
          Case "I" : strTipoDoc = "Riem. Ric.Fisc."
          Case "J" : strTipoDoc = "Note Accr. ric."
          Case "(" : strTipoDoc = "Nota accr. diff. ric."
          Case "K" : strTipoDoc = "Fatt. Diff. ric."
          Case "L" : strTipoDoc = "Fatt. Imm. ric."
          Case "M" : strTipoDoc = "DDT ricevuto"
          Case "N" : strTipoDoc = "Note Accr. em."
          Case "£" : strTipoDoc = "Nota accr. diff. em."
          Case "P" : strTipoDoc = "Fatt.Ric.Fisc.Diff."
          Case "S" : strTipoDoc = "Fatt.Ric.Fisc. em."
          Case "T" : strTipoDoc = "Carico da prod."
          Case "U" : strTipoDoc = "Scarico a prod."
          Case "Z" : strTipoDoc = "Bolle di mov.int."
          Case "W" : strTipoDoc = "Note di prel."
          Case "R" : strTipoDoc = "Imp. cliente"
          Case "O" : strTipoDoc = "Ord. forn."
          Case "H" : strTipoDoc = "Ord. di prod."
          Case "X" : strTipoDoc = "Imp. Trasfer."
          Case "Q" : strTipoDoc = "Prev."
          Case "#" : strTipoDoc = "Imp. di comm."
          Case "V" : strTipoDoc = "Imp. cli aperto"
          Case "$" : strTipoDoc = "Ord. forn aperto"
          Case "Y" : strTipoDoc = "Imp. di prod."
        End Select
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "|" & _
                      strDittaCorrente & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      Asc(strTipoDoc).ToString & "|" & _
                      ConvStr(dtrT!xx_tipobf) & "|" & _
                      ConvStr(dtrT!xx_flevas) & "|" & _
                      ConvData(dtrT!tm_datdoc, False) & "|" & _
                      ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "|" & _
                      ConvStr(dtrT!tm_tipork) & "|" & _
                      strTipoDoc.PadRight(20).Substring(0, 20).Trim & "|" & _
                      ConvStr(dtrT!tb_destpbf).PadRight(20).Substring(0, 20).Trim & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!tm_serie) & "|" & _
                      ConvStr(dtrT!tm_numdoc) & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!tm_magaz) & "|" & _
                      ConvStr(dtrT!tb_desvalu) & "|" & _
                      NTSCDec(dtrT!tm_totdoc).ToString(oApp.FormatSconti) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "0" & "|" & _
                      ConvData(dtrT!tm_datfat, False) & "|" & _
                      (ConvStr(dtrT!tm_numfat) & IIf(NTSCStr(dtrT!tm_alffat) <> " ", "/" & ConvStr(dtrT!tm_alffat), "").ToString).Trim & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvData(dtrT!tm_ultagg, True) & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforRighDoc16(ByVal strFileOut As String) As Boolean
    'restituisco le righe dei documenti degli ultimi 3 anni di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforRighDoc(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|NUM_REG|PRG_RIGA|COD_RIGA|DES_RIGA|COD_UM|QTA|PRZ_LORDO|PRZ_NETTO|IMPORTO|" & _
                    "SC_1|SC_2|DATA_CONFERMA|TIPO_CLIFOR|COD_CLIFOR|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "§" & ConvStr(dtrT!tm_numdoc1) & "§" & ConvStr(dtrT!mm_riga) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "|" & _
                      ConvStr(dtrT!mm_riga) & "|" & _
                      (ConvStr(dtrT!mm_codart) & IIf(NTSCStr(dtrT!mm_fase) <> "0", "." & ConvStr(dtrT!mm_fase), "").ToString).Trim & "|" & _
                      (ConvStr(dtrT!mm_descr) & " " & ConvStr(dtrT!mm_desint)).Trim & "|" & _
                      ConvStr(dtrT!mm_ump) & "|" & _
                      NTSCDec(dtrT!mm_quant).ToString("0.00000") & "|" & _
                      "0" & "|" & _
                      NTSCDec(dtrT!xx_prezzo).ToString("0.0000") & "|" & _
                      NTSCDec(dtrT!mm_valore).ToString("0.00") & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "" & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforRighDoc18(ByVal strFileOut As String) As Boolean
    'restituisco le righe dei documenti degli ultimi 3 anni di ogni cliente/fornitore ATTIVO o POTENZIALE
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetCliforRighDoc(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|NUM_REG|PRG_RIGA|COD_RIGA|DES_RIGA|COD_UM|QTA|PRZ_LORDO|PRZ_NETTO|IMPORTO|" & _
                    "SC_1|SC_2|DATA_CONFERMA|TIPO_CLIFOR|COD_CLIFOR|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "§" & ConvStr(dtrT!mm_riga) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc) & "|" & _
                      ConvStr(dtrT!mm_riga) & "|" & _
                      (ConvStr(dtrT!mm_codart) & IIf(NTSCStr(dtrT!mm_fase) <> "0", "." & ConvStr(dtrT!mm_fase), "").ToString).Trim & "|" & _
                      (ConvStr(dtrT!mm_descr) & " " & ConvStr(dtrT!mm_desint)).Trim & "|" & _
                      ConvStr(dtrT!mm_ump) & "|" & _
                      NTSCDec(dtrT!mm_quant).ToString("0.00000") & "|" & _
                      "0" & "|" & _
                      NTSCDec(dtrT!xx_prezzo).ToString("0.0000") & "|" & _
                      NTSCDec(dtrT!mm_valore).ToString("0.00") & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "" & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforScadoc16(ByVal strFileOut As String, ByRef dttTm As DataTable) As Boolean
    'restituisco le scadenze di cliente/fornitore ATTIVO o POTENZIALE
    'per collegare le scadenze ai relativi documenti precedentemente esportati, ...
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim strTipo As String = ""
    Dim strStato As String = ""
    Dim strReg As String = ""
    Dim dtrS() As DataRow = Nothing
    Try
      If Not oCldIbus.GetCliforScaDoc(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|NUM_REG|COD_RATA|DAT_SCAD|IMPORTO|NETTO_PREV|DES_TIPO|DES_STATO|DES_TIPO_PRES|DES_OPERAZIONE|" & _
                    "FLG_DA_LIB|FLG_SOSP|DES_BANCA_AGENZIA|TIPO_CLIFOR|COD_CLIFOR|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        Select Case NTSCStr(dtrT!sc_tippaga)
          Case "1" : strTipo = "Tratta"
          Case "2" : strTipo = "Riba"
          Case "3" : strTipo = "Rim.dir."
          Case "4" : strTipo = "Contanti"
          Case "5" : strTipo = "Accr.banc."
        End Select
        If NTSCStr(dtrT!sc_flsaldato) = "S" Then
          strStato = "Chiuso"
        Else
          strStato = "Aperto"
        End If

        'cerco di collegare la scadenza ad un qualche documento di magazzino precedentemente esportato
        'prima cerco per partita, se non trovo niente cerco per estremi documento
                'non è gestito il conto fatturazione

                strReg = ""
                If NTSCInt(dtrT!tm_anno) > 0 Then
                    strReg = ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc)
                Else
                    'la scadenza non è collegata direttamente ad un documento di magazzino (ad esempio è una scad raggruppata)
                    strReg = "0"
                End If

                'sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!sc_annpar) & "§" & ConvStr(dtrT!sc_alfpar) & "§" & ConvStr(dtrT!sc_numpar) & "§" & ConvStr(dtrT!sc_numrata) & "|" & _
                sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!sc_annpar) & "§" & ConvStr(dtrT!sc_alfpar) & "§" & ConvStr(dtrT!tm_numdoc) & "§" & ConvStr(dtrT!sc_numpar) & "§" & ConvStr(dtrT!sc_numrata) & "|" & _
                      strReg & "|" & _
                      ConvStr(dtrT!sc_numrata) & "|" & _
                      ConvData(dtrT!sc_datsca, False) & "|" & _
                      NTSCDec(dtrT!sc_importo).ToString(oApp.FormatSconti) & "|" & _
                      "0" & "|" & _
                      ConvStr(strTipo) & "|" & _
                      ConvStr(strStato) & "|" & _
                      "" & "|" & _
                      ConvStr(IIf(dtrT!sc_insolu.ToString = "S", "Insol.", "").ToString) & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      (ConvStr(dtrT!sc_banc1) & " - " & ConvStr(dtrT!sc_banc2)).Trim & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportCliforScadoc18(ByVal strFileOut As String, ByRef dttTm As DataTable) As Boolean
    'restituisco le scadenze di cliente/fornitore ATTIVO o POTENZIALE
    'per collegare le scadenze ai relativi documenti precedentemente esportati, ...
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim strTipo As String = ""
    Dim strStato As String = ""
    Dim strReg As String = ""
    Dim dtrS() As DataRow = Nothing
    Try
      If Not oCldIbus.GetCliforScaDoc(strDittaCorrente, dttTmp, strContiEsclusi) Then Return False

      sbFile.Append("CHIAVE|NUM_REG|COD_RATA|DAT_SCAD|IMPORTO|NETTO_PREV|DES_TIPO|DES_STATO|DES_TIPO_PRES|DES_OPERAZIONE|" & _
                    "FLG_DA_LIB|FLG_SOSP|DES_BANCA_AGENZIA|TIPO_CLIFOR|COD_CLIFOR|DATA_DOC|NUM_DOC|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        Select Case NTSCStr(dtrT!sc_tippaga)
          Case "1" : strTipo = "Tratta"
          Case "2" : strTipo = "Riba"
          Case "3" : strTipo = "Rim.dir."
          Case "4" : strTipo = "Contanti"
          Case "5" : strTipo = "Accr.banc."
        End Select
        If NTSCStr(dtrT!sc_flsaldato) = "S" Then
          strStato = "Chiuso"
        Else
          strStato = "Aperto"
        End If

        'cerco di collegare la scadenza ad un qualche documento di magazzino precedentemente esportato
        'prima cerco per partita, se non trovo niente cerco per estremi documento
        'non è gestito il conto fatturazione
        strReg = ""
        If NTSCInt(dtrT!tm_anno) > 0 Then
          strReg = ConvStr(dtrT!tm_tipork) & "§" & ConvStr(dtrT!tm_anno) & "§" & ConvStr(dtrT!tm_serie) & "§" & ConvStr(dtrT!tm_numdoc)
        Else
          'la scadenza non è collegata direttamente ad un documento di magazzino (ad esempio è una scad raggruppata)
          strReg = "0"
        End If

    
        'sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!sc_annpar) & "§" & ConvStr(dtrT!sc_alfpar) & "§" & ConvStr(dtrT!sc_numpar) & "§" & ConvStr(dtrT!sc_numrata) & "|" & _
		sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!an_conto) & "§" & ConvStr(dtrT!sc_annpar) & "§" & ConvStr(dtrT!sc_alfpar) & "§" & ConvStr(dtrT!tm_numdoc) & "§" & ConvStr(dtrT!sc_numpar) & "§" & ConvStr(dtrT!sc_numrata) & "|" & _
                      strReg & "|" & _
                      ConvStr(dtrT!sc_numrata) & "|" & _
                      ConvData(dtrT!sc_datsca, False) & "|" & _
                      NTSCDec(dtrT!sc_importo).ToString(oApp.FormatSconti) & "|" & _
                      "0" & "|" & _
                      ConvStr(strTipo) & "|" & _
                      ConvStr(strStato) & "|" & _
                      "" & "|" & _
                      ConvStr(IIf(dtrT!sc_insolu.ToString = "S", "Insol.", "").ToString) & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      (ConvStr(dtrT!sc_banc1) & " - " & ConvStr(dtrT!sc_banc2)).Trim & "|" & _
                      IIf(ConvStr(dtrT!an_tipo) = "C", 0, 1).ToString & "|" & _
                      ConvStr(dtrT!an_conto) & "|" & _
                      ConvData(dtrT!sc_datdoc, False) & "|" & _
                      dtrT!sc_numdoc.ToString & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportArt16(ByVal strFileOut As String, ByVal strFileOutConf As String) As Boolean
    'esporta gli articoli (e relative fasi) NO articoli TCO
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim sbFileConf As New StringBuilder
    Try
      If Not oCldIbus.GetArt(strDittaCorrente, dttTmp) Then Return False

      'IB_ART.DAT
      sbFile.Append("CHIAVE|COD_DITTA|COD_ART|DES_ART|COD_FAM|DES_FAM|COD_SFAM|DES_SFAM|COD_GRUPPO1|DES_GRUPPO1|" & _
                    "COD_GRUPPO2|DES_GRUPPO2|UM1|UM2|FATTORE_CONVERSIONE|DES_GR_STAT1|DES_GR_STAT2|QTA_MIN_VEND|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      (ConvStr(dtrT!ar_descr) & " " & ConvStr(dtrT!ar_desint) & " " & ConvStr(dtrT!af_descr)).Trim & "|" & _
                      ConvStr(dtrT!ar_gruppo) & "|" & _
                      ConvStr(dtrT!tb_desgmer) & "|" & _
                      ConvStr(dtrT!ar_sotgru) & "|" & _
                      ConvStr(dtrT!tb_dessgme) & "|" & _
                      ConvStr(dtrT!ar_famprod) & "|" & _
                      ConvStr(dtrT!tb_descfam) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!ar_unmis) & "|" & _
                      ConvStr(dtrT!ar_confez2) & "|" & _
                      NTSCDec(dtrT!ar_qtacon2).ToString("0.0000") & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "0" & "|" & _
                      ConvData(dtrT!ar_ultagg, True) & vbCrLf)
      Next

      'IB_ART_CONF.DAT
      sbFileConf.Append("CHIAVE|COD_ART|COD_DITTA|COD_CONF|PZ_CONF|FLG_PREF|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Select("ar_qtacon2 <> 0", "ar_codart")
        sbFileConf.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                          ConvStr(dtrT!ar_codart) & "|" & _
                          strDittaCorrente & "|" & _
                          ConvStr(dtrT!ar_confez2) & "|" & _
                          NTSCDec(dtrT!ar_qtacon2).ToString("0.0000") & "|" & _
                          "1" & "|" & _
                          ConvData(dtrT!ar_ultagg, True) & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutConf, False)
      w1.Write(sbFileConf.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportArt18(ByVal strFileOut As String, ByVal strFileOutConf As String) As Boolean
    'esporta gli articoli (e relative fasi) NO articoli TCO
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim sbFileConf As New StringBuilder
    Try
      If Not oCldIbus.GetArt(strDittaCorrente, dttTmp) Then Return False

      'IB_ART.DAT
      sbFile.Append("CHIAVE|COD_DITTA|COD_ART|DES_ART|COD_FAM|DES_FAM|COD_SFAM|DES_SFAM|COD_GRUPPO1|DES_GRUPPO1|" & _
                    "COD_GRUPPO2|DES_GRUPPO2|UM1|UM2|FATTORE_CONVERSIONE|DES_GR_STAT1|DES_GR_STAT2|QTA_MIN_VEND|" & _
                    "COD_ART_SCONTO|COD_CLASSE_SCONTO|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      (ConvStr(dtrT!ar_descr) & " " & ConvStr(dtrT!ar_desint) & " " & ConvStr(dtrT!af_descr)).Trim & "|" & _
                      ConvStr(dtrT!ar_gruppo) & "|" & _
                      ConvStr(dtrT!tb_desgmer) & "|" & _
                      ConvStr(dtrT!ar_sotgru) & "|" & _
                      ConvStr(dtrT!tb_dessgme) & "|" & _
                      ConvStr(dtrT!ar_famprod) & "|" & _
                      ConvStr(dtrT!tb_descfam) & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      ConvStr(dtrT!ar_unmis) & "|" & _
                      ConvStr(dtrT!ar_confez2) & "|" & _
                      NTSCDec(dtrT!ar_qtacon2).ToString("0.0000") & "|" & _
                      "" & "|" & _
                      "" & "|" & _
                      "0" & "|" & _
                      ConvStr(dtrT!ar_codartsconti) & "|" & _
                      dtrT!ar_clascon.ToString & "|" & _
                      ConvData(dtrT!ar_ultagg, True) & vbCrLf)
      Next

      'IB_ART_CONF.DAT
      sbFileConf.Append("CHIAVE|COD_ART|COD_DITTA|COD_CONF|PZ_CONF|FLG_PREF|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Select("ar_qtacon2 <> 0", "ar_codart")
        sbFileConf.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                          ConvStr(dtrT!ar_codart) & "|" & _
                          strDittaCorrente & "|" & _
                          ConvStr(dtrT!ar_confez2) & "|" & _
                          NTSCDec(dtrT!ar_qtacon2).ToString("0.0000") & "|" & _
                          "1" & "|" & _
                          ConvData(dtrT!ar_ultagg, True) & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutConf, False)
      w1.Write(sbFileConf.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportArtGiacenze(ByVal strFileOut As String) As Boolean
    'esporta le giacenze divise per magazzino degli articoli (e relative fasi) 
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetArtGiacenze(strDittaCorrente, dttTmp) Then Return False

      'sbFile.Append("CHIAVE|COD_DITTA|COD_ARTICOLO|COD_DEPOSITO|QUANTITA|UM1" & vbCrLf)
      sbFile.Append("CHIAVE|COD_DITTA|COD_ARTICOLO|COD_DEPOSITO|DES_DEPOSITO|GIACENZA|DISPONIBILITA|UM1|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "§" & ConvStr(dtrT!ap_magaz) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      ConvStr(dtrT!ap_magaz) & "|" & _
                      ConvStr(dtrT!tb_desmaga) & "|" & _
                      NTSCDec(dtrT!ap_esist).ToString("0.0000") & "|" & _
                      NTSCDec(NTSCDec(dtrT!ap_esist) + NTSCDec(dtrT!ap_ordin) - NTSCDec(dtrT!ap_impeg)).ToString("0.0000") & "|" & _
                      ConvStr(dtrT!ar_unmis) & "|" & _
                      "" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportArtUltven(ByVal strFileOut As String, ByVal strFileOutAcq As String) As Boolean
    'esporta l'ultima vendita e l'ultimo acquisto degli articoli (e relative fasi) 
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim sbFileA As New StringBuilder
    Dim i As Integer = 0
    Dim dPrezzo As Decimal = 0
    Dim lClifor As Integer = 0
    Dim strT() As String = Nothing
    Dim strDtdoc As String = ""
    Dim lNumdoc As Integer = 0
    Dim strTipork As String = ""
    Try
      If Not oCldIbus.GetArtUltven(strDittaCorrente, dttTmp) Then Return False

      'IB_ART_ULTVEN.DAT
      sbFile.Append("CHIAVE|COD_DITTA|COD_ART|PROG|VALUTA|PRZ|DATA_DOC|NUM_DOC|COD_CLFOR|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Select("xx_tipo = 0", "ar_codart")
        i += 1
        strT = NTSCStr(dtrT!xx_code).Split("§"c)
        lClifor = NTSCInt(strT(2))
        dPrezzo = NTSCDec(strT(1).Replace(".", ","))
        strDtdoc = strT(0).Substring(0, 10)
        lNumdoc = NTSCInt(strT(0).Substring(11, 9))
        strTipork = strT(0).Substring(20, 1)
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      ConvStr(i) & "|" & _
                      "" & "|" & _
                      dPrezzo.ToString("0.0000") & "|" & _
                      ConvData(strDtdoc, False) & "|" & _
                      lNumdoc & "|" & _
                      lClifor.ToString & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      'IB_ART_ULTACQ.DAT
      sbFileA.Append("CHIAVE|COD_DITTA|COD_ART|PROG|VALUTA|PRZ|DATA_DOC|NUM_DOC|COD_CLFOR|TIPO_DOC|DAT_ULT_MOD" & vbCrLf)
      i = 0
      For Each dtrT As DataRow In dttTmp.Select("xx_tipo = 1", "ar_codart")
        i += 1
        strT = NTSCStr(dtrT!xx_code).Split("§"c)
        lClifor = NTSCInt(strT(2))
        dPrezzo = NTSCDec(strT(1))
        strDtdoc = strT(0).Substring(0, 10)
        lNumdoc = NTSCInt(strT(0).Substring(11, 9))
        strTipork = strT(0).Substring(20, 1)
        sbFileA.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      ConvStr(i) & "|" & _
                      "" & "|" & _
                      dPrezzo.ToString("0.0000") & "|" & _
                      ConvData(strDtdoc, False) & "|" & _
                      lNumdoc & "|" & _
                      lClifor.ToString & "|" & _
                      "" & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      w1 = New StreamWriter(strFileOutAcq, False)
      w1.Write(sbFileA.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportArtStoart(ByVal strFileOut As String) As Boolean
    'esporta l'ultimo documento veduto per ogni cliente  
    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Dim dPrezzo As Decimal = 0
    Dim dQuant As Decimal = 0
    Dim strT() As String = Nothing
    Dim strDesart As String = ""
    Dim strData As String = ""
    Try
      If Not oCldIbus.GetArtStoart(strDittaCorrente, strFiltroGGStoArt, dttTmp) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|COD_CLIFOR|COD_ART|DESC_ARTICOLO|NUM_RIGHE|ULT_NUM_REG|ULT_PROG_RIGA|" & _
                     "ULT_QTA|ULT_PRZ|ULT_SC_PER1|ULT_SC_PER2|ULT_SC_PER3|ULT_SC_PER4|" & _
                     "ULT_SC_PER5|ULT_SC_PER6|ULT_SC_IMPORTO|ULT_MAG_PER1|ULT_MAG_PER2|" & _
                     "ULT_MAG_IMPORTO|ULT_DATA|DAT_ULT_MOD" & vbCrLf)

      For Each dtrT As DataRow In dttTmp.Rows
        strT = NTSCStr(dtrT!xx_code).Split("§"c)
        strData = strT(0)
        dPrezzo = NTSCDec(strT(2).Replace(".", ","))
        strDesart = strT(3)
        dQuant = NTSCDec(strT(4).Replace(".", ","))
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "§" & ConvStr(dtrT!td_conto) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!td_conto) & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      ConvStr(strDesart) & "|" & _
                      "1" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      dQuant.ToString("0.0000") & "|" & _
                      dPrezzo.ToString("0.0000") & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      "0" & "|" & _
                      ConvData(strData, False) & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()


      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function Elabora_ExportCatalogo(ByVal strFileOut As String, ByRef dttCat As DataTable) As Boolean
    'esporta il catalogo degli articoli  
    Dim sbFile As New StringBuilder

    Try
      If Not oCldIbus.GetArtCatalogo(strDittaCorrente, dttCat) Then Return False

      sbFile.Append("NOMEFILE|TITOLO|COD_ART|L1|L2|L3|L4|DAT_ULT_MOD" & vbCrLf)

      For Each dtrT As DataRow In dttCat.Rows
                If File.Exists(oApp.ImgDir & "\" & NTSCStr(dtrT!ar_gif1)) Then
                    sbFile.Append(ConvStr(dtrT!ar_codart) & NTSCStr(dtrT!ar_gif1).Substring(NTSCStr(dtrT!ar_gif1).Length - 4) & "|" & _
                                  (ConvStr(dtrT!ar_descr) & " " & ConvStr(dtrT!ar_desint) & " " & ConvStr(dtrT!af_descr)).Trim & "|" & _
                                  ConvStr(dtrT!ar_codart) & "|" & _
                                  ConvStr(dtrT!tb_desgmer) & "|" & _
                                  ConvStr(dtrT!tb_dessgme) & "|" & _
                                  "" & "|" & _
                                  "" & "|" & _
                                  "01011900000000" & vbCrLf)
                Else
                    dtrT.Delete()
                End If
      Next
      dttCat.AcceptChanges()

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function Elabora_ExportListini16(ByVal strFileOut As String) As Boolean
    'esporta i listini in vigore alla data odierna
    'no listini per fascedi quantità
    'no listini in valuta
    'no listini per lavorazioni
    'no listini in promozione
    'no listini per unità di misura diversa dalla ump

    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetArtListini(strDittaCorrente, dttTmp) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|COD_LIST|COD_ART|PREZZO|PREZZO_NETTO|UM1|DATA_INIZIO|DATA_FINE|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "§" & ConvStr(dtrT!lc_listino) & "§" & ConvStr(dtrT!lc_progr) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!lc_listino) & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      NTSCDec(dtrT!lc_prezzo).ToString("0.0000") & "|" & _
                      "0" & "|" & _
                      ConvStr(dtrT!ar_unmis) & "|" & _
                      ConvData(dtrT!lc_datagg, False) & "|" & _
                      ConvData(dtrT!lc_datscad, False) & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function
  Public Overridable Function Elabora_ExportListini18(ByVal strFileOut As String) As Boolean
    'esporta i listini in vigore alla data odierna
    'no listini in valuta
    'no listini per lavorazioni
    'no listini per unità di misura diversa dalla ump

    Dim dttTmp As New DataTable
    Dim sbFile As New StringBuilder
    Try
      If Not oCldIbus.GetArtListini(strDittaCorrente, dttTmp) Then Return False

      sbFile.Append("CHIAVE|COD_DITTA|COD_LIST|COD_ART|PREZZO|PREZZO_NETTO|UM1|DATA_INIZIO|DATA_FINE|" & _
                    "COD_CLIFOR|COD_PROMO|DA_QTA|A_QTA|FLG_PRZ_NETTO|PRIORITA|DAT_ULT_MOD" & vbCrLf)
      For Each dtrT As DataRow In dttTmp.Rows
        sbFile.Append(strDittaCorrente & "§" & ConvStr(dtrT!ar_codart) & "§" & ConvStr(dtrT!lc_listino) & "§" & ConvStr(dtrT!lc_progr) & "|" & _
                      strDittaCorrente & "|" & _
                      ConvStr(dtrT!lc_listino) & "|" & _
                      ConvStr(dtrT!ar_codart) & "|" & _
                      (NTSCDec(dtrT!lc_prezzo) / NTSCDec(dtrT!lc_perqta)).ToString("0.00000000") & "|" & _
                      "0" & "|" & _
                      ConvStr(dtrT!ar_unmis) & "|" & _
                      ConvData(dtrT!lc_datagg, False) & "|" & _
                      ConvData(dtrT!lc_datscad, False) & "|" & _
                      dtrT!lc_conto.ToString & "|" & _
                      dtrT!lc_codtpro.ToString & "|" & _
                      NTSCDec(dtrT!lc_daquant).ToString("0.00") & "|" & _
                      NTSCDec(dtrT!lc_aquant).ToString("0.00") & "|" & _
                      ConvStr(dtrT!lc_netto) & "|" & _
                      dtrT!xx_prior.ToString & "|" & _
                      "01011900000000" & vbCrLf)
      Next

      Dim w1 As New StreamWriter(strFileOut, False)
      w1.Write(sbFile.ToString)
      w1.Flush()
      w1.Close()

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    Finally
      dttTmp.Clear()
    End Try
  End Function

  Public Overridable Function Elabora_ImportOrdini16() As Boolean
    Dim strF() As String = Nothing  'elenco di ordini da importare
    Dim nF As Integer = 0
    Dim r1 As StreamReader = Nothing
    Dim dttFile As New DataTable
    Dim strRow() As String = Nothing
    Dim strCodart As String = ""
    Dim nFase As Integer = 0
    Dim i As Integer = 0
    Dim strStasino As String = ""
    Dim lFirstOrd As Integer = 0
    Try
      'verifico se ci sono preventivi/ordini da importare
      'anche se nel file c'è la ditta su tutti i record, in realtà un file contiene sempre e solo una ditta
      'una volta letto il file, lo cancello
      strF = System.IO.Directory.GetFiles(strDropBoxDir & "\appmanager", "IB_AM_ORD*.DAT")

      dttFile.Columns.Add("tipork", GetType(String))
      dttFile.Columns.Add("datord", GetType(DateTime))
      dttFile.Columns.Add("conto", GetType(Integer))
      dttFile.Columns.Add("agente", GetType(Integer))
      dttFile.Columns.Add("datcons", GetType(DateTime))
      dttFile.Columns.Add("codart", GetType(String))
      dttFile.Columns.Add("fase", GetType(Integer))
      dttFile.Columns.Add("desart", GetType(String))
      dttFile.Columns.Add("note", GetType(String))
      dttFile.Columns.Add("um", GetType(String))
      dttFile.Columns.Add("ump", GetType(String))
      dttFile.Columns.Add("colli", GetType(Decimal))
      dttFile.Columns.Add("quant", GetType(Decimal))
      dttFile.Columns.Add("prezzo", GetType(Decimal))
      dttFile.Columns.Add("scont1", GetType(Decimal))
      dttFile.Columns.Add("scont2", GetType(Decimal))
      dttFile.Columns.Add("stasino", GetType(String))

      'per prova
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010001, 1, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 10, 5, "N"})
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010001, 1, CDate("13/08/2012"), "ARTFASI", 2, "Descr. art. 1", "note mp1", "NR", "NR", 10, 10, 1.555, 10, 5, "N"})
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010002, 1, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 0, 0, "1"})
      'dttFile.Rows.Add(New Object() {"Q", CDate("05/08/2012"), 4010001, 2, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 0, 0, "2"})


      For nF = 0 To strF.Length - 1
        dttFile.Clear()
        r1 = New StreamReader(strF(nF))
        'la prima riga è l'intestazione delle colonne
        'r1.ReadLine()  'NON E' VERI: inizia subito con i dati da importare
        While Not r1.EndOfStream
          strRow = r1.ReadLine.Split("|"c)
          If strRow(0).ToLower.Trim <> strDittaCorrente.ToLower Then
            'il file non è per la mia ditta: lo scarto
            r1.Close()
            GoTo NEXT_FILE
          End If


          i = strRow(9).Length - 2
          While i > -1 AndAlso strRow(9).Substring(i, 1) <> "."
            i -= 1
          End While
          If i > -1 And i >= strRow(9).Length - 3 Then
            strCodart = strRow(9).Substring(0, i)
            nFase = NTSCInt(strRow(9).Substring(i + 1))
          Else
            strCodart = strRow(9).Trim
            nFase = 0
          End If

          strStasino = "S"
          Select Case strRow(17)
            Case "0" : strStasino = "S"   'riga normale
            Case "1" : strStasino = "O"   'omaggio con rivalsa
            Case "2" : strStasino = "P"   'omaggio senza rivalsa
            Case "3" : strStasino = "M"   'sconto merce
          End Select

          dttFile.Rows.Add(New Object() {"R", _
                                         NTSCDate(IntSetDate(strRow(2).Substring(0, 2) & "/" & strRow(2).Substring(2, 2) & "/" & strRow(2).Substring(4, 4))), _
                                         NTSCInt(strRow(4)), _
                                         NTSCInt(strRow(5)), _
                                         NTSCDate(IntSetDate(strRow(6).Substring(0, 2) & "/" & strRow(6).Substring(2, 2) & "/" & strRow(6).Substring(4, 4))), _
                                         strCodart, _
                                         nFase, _
                                         strRow(10).PadRight(40).Substring(0, 40).Trim, _
                                         strRow(7), _
                                         IIf(strRow(12) = "", strRow(11), strRow(12)), _
                                         strRow(11), _
                                         NTSCDec(strRow(14)), _
                                         NTSCDec(strRow(13)), _
                                         NTSCDec(strRow(15)), _
                                         NTSCDec(strRow(18)), _
                                         NTSCDec(strRow(19)), _
                                         strStasino})
        End While
        r1.Close()

        'ho letto l'intero file: ora genero il documento e cancello il file
        'per il fatto che da un file possono venir generati più ordini
        'sarebbe bene che in un file ci sia solo un ordine, diversamente se nel file possono esserci 3 ordini e la 
        'routine GeneraOrdini ne crea correttamente solo 2
        'se cancello il file 1 ordine viene perso, se tengo il file alla prossima rielaborazione  importo nuovamente anche i 2 ordini già importati
        If GeneraOrdini(dttFile, lFirstOrd) Then
          System.IO.File.Delete(strF(nF))
        Else
          lFirstOrd = 0
        End If

NEXT_FILE:
      Next    'For nF = 0 To strF.Length - 1

      If lFirstOrd <> 0 Then
        LogWrite(oApp.Tr(Me, 129919999269031600, "Import ordini avvenuto corretamente. Primo impegno cliente creato: |" & lFirstOrd.ToString & "|"), True)
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function Elabora_ImportOrdini18() As Boolean
    Dim strF() As String = Nothing  'elenco di ordini da importare
    Dim nF As Integer = 0
    Dim r1 As StreamReader = Nothing
    Dim dttFile As New DataTable
    Dim strRow() As String = Nothing
    Dim strCodart As String = ""
    Dim nFase As Integer = 0
    Dim i As Integer = 0
    Dim strStasino As String = ""
    Dim lFirstOrd As Integer = 0
    Try
      'verifico se ci sono preventivi/ordini da importare
      'anche se nel file c'è la ditta su tutti i record, in realtà un file contiene sempre e solo una ditta
      'una volta letto il file, lo cancello
      strF = System.IO.Directory.GetFiles(strDropBoxDir & "\appmanager", "IB_AM_ORD*.DAT")

      dttFile.Columns.Add("tipork", GetType(String))
      dttFile.Columns.Add("datord", GetType(DateTime))
      dttFile.Columns.Add("conto", GetType(Integer))
      dttFile.Columns.Add("agente", GetType(Integer))
      dttFile.Columns.Add("datcons", GetType(DateTime))
      dttFile.Columns.Add("codart", GetType(String))
      dttFile.Columns.Add("fase", GetType(Integer))
      dttFile.Columns.Add("desart", GetType(String))
      dttFile.Columns.Add("note", GetType(String))
      dttFile.Columns.Add("um", GetType(String))
      dttFile.Columns.Add("ump", GetType(String))
      dttFile.Columns.Add("colli", GetType(Decimal))
      dttFile.Columns.Add("quant", GetType(Decimal))
      dttFile.Columns.Add("prezzo", GetType(Decimal))
      dttFile.Columns.Add("scont1", GetType(Decimal))
      dttFile.Columns.Add("scont2", GetType(Decimal))
      dttFile.Columns.Add("scont3", GetType(Decimal))
      dttFile.Columns.Add("scont4", GetType(Decimal))
      dttFile.Columns.Add("scont5", GetType(Decimal))
      dttFile.Columns.Add("scont6", GetType(Decimal))
      dttFile.Columns.Add("stasino", GetType(String))

      'per prova
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010001, 1, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 10, 5, 0, 0, 0, 0, "N"})
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010001, 1, CDate("13/08/2012"), "ARTFASI", 2, "Descr. art. 1", "note mp1", "NR", "NR", 10, 10, 1.555, 10, 5, 0, 0, 0, 0, "N"})
      'dttFile.Rows.Add(New Object() {"R", CDate("05/08/2012"), 4010002, 1, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 0, 0, 0, 0, 0, 0, "1"})
      'dttFile.Rows.Add(New Object() {"Q", CDate("05/08/2012"), 4010001, 2, CDate("13/08/2012"), "mp1", 0, "Descr. art. 1", "note mp1", "CT", "NR", 1.5, 45, 1.555, 0, 0, 0, 0, 0, 0, "2"})


      For nF = 0 To strF.Length - 1
        dttFile.Clear()
        r1 = New StreamReader(strF(nF))
        'la prima riga è l'intestazione delle colonne
        'r1.ReadLine()  'NON E' VERI: inizia subito con i dati da importare
        While Not r1.EndOfStream
          strRow = r1.ReadLine.Split("|"c)
          If strRow(0).ToLower.Trim <> strDittaCorrente.ToLower Then
            'il file non è per la mia ditta: lo scarto
            r1.Close()
            GoTo NEXT_FILE
          End If


          i = strRow(9).Length - 2
          While i > -1 AndAlso strRow(9).Substring(i, 1) <> "."
            i -= 1
          End While
          If i > -1 And i >= strRow(9).Length - 3 Then
            strCodart = strRow(9).Substring(0, i)
            nFase = NTSCInt(strRow(9).Substring(i + 1))
          Else
            strCodart = strRow(9).Trim
            nFase = 0
          End If

          strStasino = "S"
          Select Case strRow(17)
            Case "0" : strStasino = "S"   'riga normale
            Case "1" : strStasino = "O"   'omaggio con rivalsa
            Case "2" : strStasino = "P"   'omaggio senza rivalsa
            Case "3" : strStasino = "M"   'sconto merce
          End Select

          dttFile.Rows.Add(New Object() {"R", _
                                         NTSCDate(IntSetDate(strRow(2).Substring(0, 2) & "/" & strRow(2).Substring(2, 2) & "/" & strRow(2).Substring(4, 4))), _
                                         NTSCInt(strRow(4)), _
                                         NTSCInt(strRow(5)), _
                                         NTSCDate(IntSetDate(strRow(6).Substring(0, 2) & "/" & strRow(6).Substring(2, 2) & "/" & strRow(6).Substring(4, 4))), _
                                         strCodart, _
                                         nFase, _
                                         strRow(10).PadRight(40).Substring(0, 40).Trim, _
                                         strRow(7), _
                                         IIf(strRow(12) = "", strRow(11), strRow(12)), _
                                         strRow(11), _
                                         NTSCDec(strRow(14)), _
                                         NTSCDec(strRow(13)), _
                                         NTSCDec(strRow(15)), _
                                         NTSCDec(strRow(18)), _
                                         NTSCDec(strRow(19)), _
                                         NTSCDec(strRow(20)), _
                                         NTSCDec(strRow(21)), _
                                         NTSCDec(strRow(22)), _
                                         NTSCDec(strRow(23)), _
                                         strStasino})
        End While
        r1.Close()

        'ho letto l'intero file: ora genero il documento e cancello il file
        'per il fatto che da un file possono venir generati più ordini
        'sarebbe bene che in un file ci sia solo un ordine, diversamente se nel file possono esserci 3 ordini e la 
        'routine GeneraOrdini ne crea correttamente solo 2
        'se cancello il file 1 ordine viene perso, se tengo il file alla prossima rielaborazione  importo nuovamente anche i 2 ordini già importati
        If GeneraOrdini(dttFile, lFirstOrd) Then
          System.IO.File.Delete(strF(nF))
        Else
          lFirstOrd = 0
        End If

NEXT_FILE:
      Next    'For nF = 0 To strF.Length - 1

      If lFirstOrd <> 0 Then
        LogWrite(oApp.Tr(Me, 129919999269031600, "Import ordini avvenuto corretamente. Primo impegno cliente creato: |" & lFirstOrd.ToString & "|"), True)
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Function GeneraOrdini(ByRef dttIn As DataTable, ByRef lFirstOrd As Integer) As Boolean
    'nel datatabae vengono passati gli ordini della ditta corrente
    'devo generare più ordini, raggruppando per cliente/data ordine
    Dim strKey As String = ""
    Dim strLastKey As String = ""
    Dim ds As New DataSet
    Dim oCleGsor As CLEORGSOR
    Dim bTestaCreata As Boolean = False   'se true la testata dell'ordine è già stata creata
    Dim strSerie As String = " "
    Dim nTipoBF As Integer = 0
    Dim nMagaz As Integer = 0
    Dim lNumord As Integer = 0
    Dim nRiga As Integer = 0
    Dim strCodart As String = ""
    Dim lFaseArt As Integer = 0
    Try
      '----------------------------
      'inizializzo BEORGSOR
      strSerie = oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "SERIE_ORDINI", " ", " ", " ")
      nTipoBF = NTSCInt(oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "TIPOBF_ORDINI", " ", " ", " "))
      nMagaz = NTSCInt(oCldIbus.GetSettingBusDitt(strDittaCorrente, "Bsieibus", "Opzioni", ".", "MAGAZ_ORDINI", " ", " ", " "))

      Dim strErr As String = ""
      Dim oTmp As Object = Nothing
      If CLN__STD.NTSIstanziaDll(oApp.ServerDir, oApp.NetDir, "BETVTRAS", "BEORGSOR", oTmp, strErr, False, "", "") = False Then
        Throw New NTSException(oApp.Tr(Me, 128895477321672967, "ERRORE in fase di creazione Entity:" & vbCrLf & "|" & strErr & "|"))
        Return False
      End If
      oCleGsor = CType(oTmp, CLEORGSOR)
      '------------------------------------------------
      AddHandler oCleGsor.RemoteEvent, AddressOf GestisciEventiEntityGsor
      If oCleGsor.Init(oApp, oScript, oCleComm, "", False, "", "") = False Then Return False
      If Not oCleGsor.InitExt() Then Return False
      oCleGsor.bModuloCRM = False
      oCleGsor.bIsCRMUser = False

      If Not oCleGsor.ApriOrdine(strDittaCorrente, False, "Q", 1900, " ", -1, ds) Then Return False
      oCleGsor.bInApriDocSilent = True
      oCleGsor.ResetVar()


      '------------------------------------------------
      'per ogni riga genero preventivi/ordini
      For Each dtrT As DataRow In dttIn.Select("", "tipork, datord, conto, agente")
        strKey = NTSCStr(dtrT!tipork) + "|" + NTSCDate(dtrT!datord).ToShortDateString + "|" + NTSCStr(dtrT!conto) + "|" + NTSCStr(dtrT!agente)
        If strLastKey <> "" And strKey <> strLastKey Then
          '-------------------
          'salvo l'ordine visto che ne devo generare un altro
          If bTestaCreata Then
            If Not oCleGsor.SalvaOrdine("N") Then
              Return False
            End If
          End If
          bTestaCreata = False
        End If

        '-------------------
        'creo la nuova testata d'ordine se serve
        If Not bTestaCreata Then
          lNumord = oCldIbus.LegNuma(strDittaCorrente, NTSCStr(dtrT!tipork), strSerie, NTSCDate(dtrT!datord).Year, False)
          If lNumord = 0 Then
            ThrowRemoteEvent(New NTSEventArgs("", oApp.Tr(Me, 129887230283255079, "Prima di creare un nuovo Preventivo/Impegno cliente è necessario attivare la numerazione")))
            Return False
          End If
          If lFirstOrd = 0 Then lFirstOrd = lNumord
          If Not oCleGsor.NuovoOrdine(strDittaCorrente, NTSCStr(dtrT!tipork), NTSCDate(dtrT!datord).Year, strSerie, lNumord) Then
            Return False
          End If

          'compilo i campi di testata con quello che viene passato da IBUS
          oCleGsor.dttET.Rows(0)!et_datdoc = NTSCDate(dtrT!datord)
          oCleGsor.dttET.Rows(0)!et_conto = NTSCInt(dtrT!conto)
          oCleGsor.dttET.Rows(0)!et_coddest = 0
          oCleGsor.dttET.Rows(0)!et_datcons = NTSCDate(dtrT!datord)
          If nTipoBF > 0 Then oCleGsor.dttET.Rows(0)!et_tipobf = nTipoBF
          If nMagaz > 0 Then oCleGsor.dttET.Rows(0)!et_magaz = nMagaz
          oCleGsor.dttET.Rows(0)!et_codagen = NTSCInt(dtrT!agente)

          oCleGsor.bInCreaDocDaGnor = True
          oCleGsor.bInDuplicadoc = True             'tolgo un po' di messaggi tipo 'confermi riga con qta = 0, con prezzo = 0, non faccio esplodere righe kit, oppure gestione articoli accessori/succedanei, ...
          oCleGsor.bSaltaAfterInsert = True         'non fa esplodere la diba e le righe kit 
          nRiga = 0
          bTestaCreata = True
        End If

        '-------------------
        'aggiungo la riga d'ordine
        nRiga += 10
        strCodart = NTSCStr(dtrT!codart)
        lFaseArt = NTSCInt(dtrT!fase)
        If NTSCStr(dtrT!codart).Trim = "" Then
          strCodart = "D"
          lFaseArt = 0
        End If

        If Not oCleGsor.AggiungiRigaCorpo(False, strCodart, lFaseArt, nRiga) Then
          Return False
        End If
        With oCleGsor.dttEC.Rows(oCleGsor.dttEC.Rows.Count - 1)
          If NTSCStr(dtrT!desart).Trim <> "" Then !ec_descr = NTSCStr(dtrT!desart).PadRight(40).Substring(0, 40)
          If NTSCStr(dtrT!desart).Length > 40 Then
            !ec_note = NTSCStr(dtrT!desart).PadRight(40).Substring(40, 40)
          End If
          !ec_note = NTSCStr(dtrT!note)
          !ec_unmis = NTSCStr(dtrT!um)
          !ec_colli = NTSCDec(dtrT!colli)
          !ec_quant = NTSCDec(dtrT!quant)
          !ec_prezzo = NTSCDec(dtrT!prezzo)
          !ec_scont1 = NTSCDec(dtrT!scont1)
          !ec_scont2 = NTSCDec(dtrT!scont2)
          !ec_datcons = NTSCDate(dtrT!datcons)
          !ec_stasino = NTSCStr(dtrT!stasino)
        End With
                If Not oCleGsor.RecordSalva(oCleGsor.dttEC.Rows.Count - 1, False, Nothing) Then Return False

        strLastKey = strKey
      Next    'For Each dtrT As DataRow In dttIn.Select("", "tipork, datord, conto")

      '-------------------
      'salvo l'ultimo ordine
      If bTestaCreata Then
        If Not oCleGsor.SalvaOrdine("N") Then
          Return False
        End If
        bTestaCreata = False
      End If

      Return True

    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Function
  Public Overridable Sub GestisciEventiEntityGsor(ByVal sender As Object, ByRef e As NTSEventArgs)
    Try
      'gli eventuali messaggi dati da BEORGSOR tramite la ThrowRemoteEvent li passo a BNIEIBUS
      ThrowRemoteEvent(e)
    Catch ex As Exception
      '--------------------------------------------------------------
      If GestErrorCallThrow() Then
        Throw New NTSException(GestError(ex, Me, "", oApp.InfoError, "", False))
      Else
        ThrowRemoteEvent(New NTSEventArgs("", GestError(ex, Me, "", oApp.InfoError, "", False)))
      End If
      '--------------------------------------------------------------	
    End Try
  End Sub

End Class
